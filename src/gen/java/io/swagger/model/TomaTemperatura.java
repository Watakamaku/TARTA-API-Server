/*
 * Servicio de alertas por cambios en la termoregulaci√≥n de usuarios
 * API que contiene los microservicios ofrecidos por el servidor, para el funcionamiento del servicio de alertas y monitorizacion de constantes
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dgarciakr@alumnos.unex.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * TomaTemperatura
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2020-11-28T11:29:04.589Z[GMT]")public class TomaTemperatura   {
  @JsonProperty("idUser")
  private String idUser = null;

  @JsonProperty("temperatura")
  private Float temperatura = null;

  @JsonProperty("pulso")
  private Float pulso = null;

  @JsonProperty("timestamp")
  private String timestamp = null;

  public TomaTemperatura idUser(String idUser) {
    this.idUser = idUser;
    return this;
  }

  /**
   * Get idUser
   * @return idUser
   **/
  @JsonProperty("idUser")
  @Schema(example = "usuario1", required = true, description = "")
  @NotNull
  public String getIdUser() {
    return idUser;
  }

  public void setIdUser(String idUser) {
    this.idUser = idUser;
  }

  public TomaTemperatura temperatura(Float temperatura) {
    this.temperatura = temperatura;
    return this;
  }

  /**
   * Get temperatura
   * @return temperatura
   **/
  @JsonProperty("temperatura")
  @Schema(example = "35.2", required = true, description = "")
  @NotNull
  public Float getTemperatura() {
    return temperatura;
  }

  public void setTemperatura(Float temperatura) {
    this.temperatura = temperatura;
  }

  public TomaTemperatura pulso(Float pulso) {
    this.pulso = pulso;
    return this;
  }

  /**
   * Get pulso
   * @return pulso
   **/
  @JsonProperty("pulso")
  @Schema(example = "75.3", required = true, description = "")
  @NotNull
  public Float getPulso() {
    return pulso;
  }

  public void setPulso(Float pulso) {
    this.pulso = pulso;
  }

  public TomaTemperatura timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   **/
  @JsonProperty("timestamp")
  @Schema(example = "2020-11-12T12:00:00.000", required = true, description = "")
  @NotNull
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TomaTemperatura tomaTemperatura = (TomaTemperatura) o;
    return Objects.equals(this.idUser, tomaTemperatura.idUser) &&
        Objects.equals(this.temperatura, tomaTemperatura.temperatura) &&
        Objects.equals(this.pulso, tomaTemperatura.pulso) &&
        Objects.equals(this.timestamp, tomaTemperatura.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idUser, temperatura, pulso, timestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TomaTemperatura {\n");
    
    sb.append("    idUser: ").append(toIndentedString(idUser)).append("\n");
    sb.append("    temperatura: ").append(toIndentedString(temperatura)).append("\n");
    sb.append("    pulso: ").append(toIndentedString(pulso)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
